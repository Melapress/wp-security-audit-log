<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace WSAL_Vendor\Twilio\Rest\Messaging\V1;

use WSAL_Vendor\Twilio\Exceptions\TwilioException;
use WSAL_Vendor\Twilio\InstanceResource;
use WSAL_Vendor\Twilio\Options;
use WSAL_Vendor\Twilio\Values;
use WSAL_Vendor\Twilio\Version;
/**
 * @property string $redirectTo
 */
class DeactivationsInstance extends \WSAL_Vendor\Twilio\InstanceResource
{
    /**
     * Initialize the DeactivationsInstance
     *
     * @param Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     */
    public function __construct(\WSAL_Vendor\Twilio\Version $version, array $payload)
    {
        parent::__construct($version);
        // Marshaled Properties
        $this->properties = ['redirectTo' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'redirect_to')];
        $this->solution = [];
    }
    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return DeactivationsContext Context for this DeactivationsInstance
     */
    protected function proxy() : \WSAL_Vendor\Twilio\Rest\Messaging\V1\DeactivationsContext
    {
        if (!$this->context) {
            $this->context = new \WSAL_Vendor\Twilio\Rest\Messaging\V1\DeactivationsContext($this->version);
        }
        return $this->context;
    }
    /**
     * Fetch the DeactivationsInstance
     *
     * @param array|Options $options Optional Arguments
     * @return DeactivationsInstance Fetched DeactivationsInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch(array $options = []) : \WSAL_Vendor\Twilio\Rest\Messaging\V1\DeactivationsInstance
    {
        return $this->proxy()->fetch($options);
    }
    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get(string $name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \WSAL_Vendor\Twilio\Exceptions\TwilioException('Unknown property: ' . $name);
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Messaging.V1.DeactivationsInstance ' . \implode(' ', $context) . ']';
    }
}
