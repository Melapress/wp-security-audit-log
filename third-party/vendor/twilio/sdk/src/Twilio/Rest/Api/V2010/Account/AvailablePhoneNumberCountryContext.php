<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace WSAL_Vendor\Twilio\Rest\Api\V2010\Account;

use WSAL_Vendor\Twilio\Exceptions\TwilioException;
use WSAL_Vendor\Twilio\InstanceContext;
use WSAL_Vendor\Twilio\ListResource;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\LocalList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\MachineToMachineList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\MobileList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\NationalList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\SharedCostList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\TollFreeList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\VoipList;
use WSAL_Vendor\Twilio\Values;
use WSAL_Vendor\Twilio\Version;
/**
 * @property LocalList $local
 * @property TollFreeList $tollFree
 * @property MobileList $mobile
 * @property NationalList $national
 * @property VoipList $voip
 * @property SharedCostList $sharedCost
 * @property MachineToMachineList $machineToMachine
 */
class AvailablePhoneNumberCountryContext extends \WSAL_Vendor\Twilio\InstanceContext
{
    protected $_local;
    protected $_tollFree;
    protected $_mobile;
    protected $_national;
    protected $_voip;
    protected $_sharedCost;
    protected $_machineToMachine;
    /**
     * Initialize the AvailablePhoneNumberCountryContext
     *
     * @param Version $version Version that contains the resource
     * @param string $accountSid The SID of the Account requesting the available
     *                           phone number Country resource
     * @param string $countryCode The ISO country code of the country to fetch
     *                            available phone number information about
     */
    public function __construct(\WSAL_Vendor\Twilio\Version $version, $accountSid, $countryCode)
    {
        parent::__construct($version);
        // Path Solution
        $this->solution = ['accountSid' => $accountSid, 'countryCode' => $countryCode];
        $this->uri = '/Accounts/' . \rawurlencode($accountSid) . '/AvailablePhoneNumbers/' . \rawurlencode($countryCode) . '.json';
    }
    /**
     * Fetch the AvailablePhoneNumberCountryInstance
     *
     * @return AvailablePhoneNumberCountryInstance Fetched
     *                                             AvailablePhoneNumberCountryInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryInstance
    {
        $payload = $this->version->fetch('GET', $this->uri);
        return new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountryInstance($this->version, $payload, $this->solution['accountSid'], $this->solution['countryCode']);
    }
    /**
     * Access the local
     */
    protected function getLocal() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\LocalList
    {
        if (!$this->_local) {
            $this->_local = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\LocalList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_local;
    }
    /**
     * Access the tollFree
     */
    protected function getTollFree() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\TollFreeList
    {
        if (!$this->_tollFree) {
            $this->_tollFree = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\TollFreeList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_tollFree;
    }
    /**
     * Access the mobile
     */
    protected function getMobile() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\MobileList
    {
        if (!$this->_mobile) {
            $this->_mobile = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\MobileList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_mobile;
    }
    /**
     * Access the national
     */
    protected function getNational() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\NationalList
    {
        if (!$this->_national) {
            $this->_national = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\NationalList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_national;
    }
    /**
     * Access the voip
     */
    protected function getVoip() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\VoipList
    {
        if (!$this->_voip) {
            $this->_voip = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\VoipList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_voip;
    }
    /**
     * Access the sharedCost
     */
    protected function getSharedCost() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\SharedCostList
    {
        if (!$this->_sharedCost) {
            $this->_sharedCost = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\SharedCostList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_sharedCost;
    }
    /**
     * Access the machineToMachine
     */
    protected function getMachineToMachine() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\MachineToMachineList
    {
        if (!$this->_machineToMachine) {
            $this->_machineToMachine = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\AvailablePhoneNumberCountry\MachineToMachineList($this->version, $this->solution['accountSid'], $this->solution['countryCode']);
        }
        return $this->_machineToMachine;
    }
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get(string $name) : \WSAL_Vendor\Twilio\ListResource
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \WSAL_Vendor\Twilio\Exceptions\TwilioException('Unknown subresource ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call(string $name, array $arguments) : \WSAL_Vendor\Twilio\InstanceContext
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }
        throw new \WSAL_Vendor\Twilio\Exceptions\TwilioException('Resource does not have a context');
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Api.V2010.AvailablePhoneNumberCountryContext ' . \implode(' ', $context) . ']';
    }
}
