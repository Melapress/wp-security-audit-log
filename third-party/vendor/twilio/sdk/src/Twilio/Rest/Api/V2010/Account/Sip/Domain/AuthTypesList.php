<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain;

use WSAL_Vendor\Twilio\Exceptions\TwilioException;
use WSAL_Vendor\Twilio\InstanceContext;
use WSAL_Vendor\Twilio\ListResource;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain\AuthTypes\AuthTypeCallsList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain\AuthTypes\AuthTypeRegistrationsList;
use WSAL_Vendor\Twilio\Version;
/**
 * @property AuthTypeCallsList $calls
 * @property AuthTypeRegistrationsList $registrations
 */
class AuthTypesList extends \WSAL_Vendor\Twilio\ListResource
{
    protected $_calls = null;
    protected $_registrations = null;
    /**
     * Construct the AuthTypesList
     *
     * @param Version $version Version that contains the resource
     * @param string $accountSid The SID of the Account that created the resource
     * @param string $domainSid The unique string that identifies the resource
     */
    public function __construct(\WSAL_Vendor\Twilio\Version $version, string $accountSid, string $domainSid)
    {
        parent::__construct($version);
        // Path Solution
        $this->solution = ['accountSid' => $accountSid, 'domainSid' => $domainSid];
    }
    /**
     * Access the calls
     */
    protected function getCalls() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain\AuthTypes\AuthTypeCallsList
    {
        if (!$this->_calls) {
            $this->_calls = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain\AuthTypes\AuthTypeCallsList($this->version, $this->solution['accountSid'], $this->solution['domainSid']);
        }
        return $this->_calls;
    }
    /**
     * Access the registrations
     */
    protected function getRegistrations() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain\AuthTypes\AuthTypeRegistrationsList
    {
        if (!$this->_registrations) {
            $this->_registrations = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Sip\Domain\AuthTypes\AuthTypeRegistrationsList($this->version, $this->solution['accountSid'], $this->solution['domainSid']);
        }
        return $this->_registrations;
    }
    /**
     * Magic getter to lazy load subresources
     *
     * @param string $name Subresource to return
     * @return \Twilio\ListResource The requested subresource
     * @throws TwilioException For unknown subresources
     */
    public function __get(string $name)
    {
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \WSAL_Vendor\Twilio\Exceptions\TwilioException('Unknown subresource ' . $name);
    }
    /**
     * Magic caller to get resource contexts
     *
     * @param string $name Resource to return
     * @param array $arguments Context parameters
     * @return InstanceContext The requested resource context
     * @throws TwilioException For unknown resource
     */
    public function __call(string $name, array $arguments) : \WSAL_Vendor\Twilio\InstanceContext
    {
        $property = $this->{$name};
        if (\method_exists($property, 'getContext')) {
            return \call_user_func_array(array($property, 'getContext'), $arguments);
        }
        throw new \WSAL_Vendor\Twilio\Exceptions\TwilioException('Resource does not have a context');
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        return '[Twilio.Api.V2010.AuthTypesList]';
    }
}
