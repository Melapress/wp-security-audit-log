<?php

/**
 * This code was generated by
 * \ / _    _  _|   _  _
 * | (_)\/(_)(_|\/| |(/_  v1.0.0
 * /       /
 */
namespace WSAL_Vendor\Twilio\Rest\Api\V2010\Account;

use WSAL_Vendor\Twilio\Deserialize;
use WSAL_Vendor\Twilio\Exceptions\TwilioException;
use WSAL_Vendor\Twilio\InstanceResource;
use WSAL_Vendor\Twilio\Options;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\EventList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\FeedbackList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\NotificationList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\PaymentList;
use WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\RecordingList;
use WSAL_Vendor\Twilio\Values;
use WSAL_Vendor\Twilio\Version;
/**
 * @property string $sid
 * @property \DateTime $dateCreated
 * @property \DateTime $dateUpdated
 * @property string $parentCallSid
 * @property string $accountSid
 * @property string $to
 * @property string $toFormatted
 * @property string $from
 * @property string $fromFormatted
 * @property string $phoneNumberSid
 * @property string $status
 * @property \DateTime $startTime
 * @property \DateTime $endTime
 * @property string $duration
 * @property string $price
 * @property string $priceUnit
 * @property string $direction
 * @property string $answeredBy
 * @property string $annotation
 * @property string $apiVersion
 * @property string $forwardedFrom
 * @property string $groupSid
 * @property string $callerName
 * @property string $queueTime
 * @property string $trunkSid
 * @property string $uri
 * @property array $subresourceUris
 */
class CallInstance extends \WSAL_Vendor\Twilio\InstanceResource
{
    protected $_recordings;
    protected $_notifications;
    protected $_feedback;
    protected $_events;
    protected $_payments;
    /**
     * Initialize the CallInstance
     *
     * @param Version $version Version that contains the resource
     * @param mixed[] $payload The response payload
     * @param string $accountSid The SID of the Account that created this resource
     * @param string $sid The SID of the Call resource to fetch
     */
    public function __construct(\WSAL_Vendor\Twilio\Version $version, array $payload, string $accountSid, string $sid = null)
    {
        parent::__construct($version);
        // Marshaled Properties
        $this->properties = ['sid' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'sid'), 'dateCreated' => \WSAL_Vendor\Twilio\Deserialize::dateTime(\WSAL_Vendor\Twilio\Values::array_get($payload, 'date_created')), 'dateUpdated' => \WSAL_Vendor\Twilio\Deserialize::dateTime(\WSAL_Vendor\Twilio\Values::array_get($payload, 'date_updated')), 'parentCallSid' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'parent_call_sid'), 'accountSid' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'account_sid'), 'to' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'to'), 'toFormatted' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'to_formatted'), 'from' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'from'), 'fromFormatted' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'from_formatted'), 'phoneNumberSid' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'phone_number_sid'), 'status' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'status'), 'startTime' => \WSAL_Vendor\Twilio\Deserialize::dateTime(\WSAL_Vendor\Twilio\Values::array_get($payload, 'start_time')), 'endTime' => \WSAL_Vendor\Twilio\Deserialize::dateTime(\WSAL_Vendor\Twilio\Values::array_get($payload, 'end_time')), 'duration' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'duration'), 'price' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'price'), 'priceUnit' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'price_unit'), 'direction' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'direction'), 'answeredBy' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'answered_by'), 'annotation' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'annotation'), 'apiVersion' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'api_version'), 'forwardedFrom' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'forwarded_from'), 'groupSid' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'group_sid'), 'callerName' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'caller_name'), 'queueTime' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'queue_time'), 'trunkSid' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'trunk_sid'), 'uri' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'uri'), 'subresourceUris' => \WSAL_Vendor\Twilio\Values::array_get($payload, 'subresource_uris')];
        $this->solution = ['accountSid' => $accountSid, 'sid' => $sid ?: $this->properties['sid']];
    }
    /**
     * Generate an instance context for the instance, the context is capable of
     * performing various actions.  All instance actions are proxied to the context
     *
     * @return CallContext Context for this CallInstance
     */
    protected function proxy() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\CallContext
    {
        if (!$this->context) {
            $this->context = new \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\CallContext($this->version, $this->solution['accountSid'], $this->solution['sid']);
        }
        return $this->context;
    }
    /**
     * Delete the CallInstance
     *
     * @return bool True if delete succeeds, false otherwise
     * @throws TwilioException When an HTTP error occurs.
     */
    public function delete() : bool
    {
        return $this->proxy()->delete();
    }
    /**
     * Fetch the CallInstance
     *
     * @return CallInstance Fetched CallInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function fetch() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\CallInstance
    {
        return $this->proxy()->fetch();
    }
    /**
     * Update the CallInstance
     *
     * @param array|Options $options Optional Arguments
     * @return CallInstance Updated CallInstance
     * @throws TwilioException When an HTTP error occurs.
     */
    public function update(array $options = []) : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\CallInstance
    {
        return $this->proxy()->update($options);
    }
    /**
     * Access the recordings
     */
    protected function getRecordings() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\RecordingList
    {
        return $this->proxy()->recordings;
    }
    /**
     * Access the notifications
     */
    protected function getNotifications() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\NotificationList
    {
        return $this->proxy()->notifications;
    }
    /**
     * Access the feedback
     */
    protected function getFeedback() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\FeedbackList
    {
        return $this->proxy()->feedback;
    }
    /**
     * Access the events
     */
    protected function getEvents() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\EventList
    {
        return $this->proxy()->events;
    }
    /**
     * Access the payments
     */
    protected function getPayments() : \WSAL_Vendor\Twilio\Rest\Api\V2010\Account\Call\PaymentList
    {
        return $this->proxy()->payments;
    }
    /**
     * Magic getter to access properties
     *
     * @param string $name Property to access
     * @return mixed The requested property
     * @throws TwilioException For unknown properties
     */
    public function __get(string $name)
    {
        if (\array_key_exists($name, $this->properties)) {
            return $this->properties[$name];
        }
        if (\property_exists($this, '_' . $name)) {
            $method = 'get' . \ucfirst($name);
            return $this->{$method}();
        }
        throw new \WSAL_Vendor\Twilio\Exceptions\TwilioException('Unknown property: ' . $name);
    }
    /**
     * Provide a friendly representation
     *
     * @return string Machine friendly representation
     */
    public function __toString() : string
    {
        $context = [];
        foreach ($this->solution as $key => $value) {
            $context[] = "{$key}={$value}";
        }
        return '[Twilio.Api.V2010.CallInstance ' . \implode(' ', $context) . ']';
    }
}
